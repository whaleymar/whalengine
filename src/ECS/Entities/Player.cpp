#include "ECS/Components/AnimUtil.h"
#include "ECS/Components/Animator.h"
#include "ECS/Components/Draw.h"
#include "ECS/Components/PlayerControl.h"
#include "ECS/Components/Position.h"
#include "ECS/Components/RigidBody.h"
#include "ECS/Components/Velocity.h"
#include "ECS/Lib/ECS.h"

#include "Gfx/GfxUtil.h"

namespace whal {

// TODO this could be simplified. Ideally this should be read from a file generated by aseprite?
// File would look something like this:
// "basename","count"
// "actor/player-run","4"
//
// this way, the only thing stored in code is animation names. Changing # of frames and file names is trivial

namespace PlayerAnim {

const char* IDLE = "actor/player-idle";
const char* RUN = "actor/player-run";

// bool animBrain(Animator& animator, ecs::Entity entity) {
//     const char* curAnim = animator.animations[animator.curAnimIx].name;
//
// }

}  // namespace PlayerAnim

Expected<ecs::Entity> createPlayer() {
    auto& ecs = ecs::ECS::getInstance();

    auto expected = ecs.entity();
    if (!expected.isExpected()) {
        return expected;
    }
    auto player = expected.value();
    player.add<Position>(Position::tiles(15, 10));
    player.add<Velocity>();
    player.add<PlayerControlRB>();
    // player.add<PlayerControlFree>();

    // graphics
    Animator animator;
    AnimInfo animInfo = {{PlayerAnim::RUN, 4}};  // TODO read from file
    loadAnimations(animator, animInfo);
    player.add(animator);
    player.add(Sprite(Depth::Player, animator.getFrame()));

    s32 width = 16;
    s32 height = 16;
    auto halfLenX = PIXELS_PER_TEXEL * width / 4;
    auto halfLenY = PIXELS_PER_TEXEL * height / 2;
    player.add<RigidBody>(RigidBody(toFloatVec(player.get<Position>().e), halfLenX, halfLenY));

    return player;
}

}  // namespace whal
