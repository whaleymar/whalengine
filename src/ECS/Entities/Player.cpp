#include "ECS/Components/Animator.h"
#include "ECS/Components/Draw.h"
#include "ECS/Components/PlayerControl.h"
#include "ECS/Components/Position.h"
#include "ECS/Components/RigidBody.h"
#include "ECS/Components/Velocity.h"
#include "ECS/Lib/ECS.h"

#include "Gfx/GLResourceManager.h"
#include "Gfx/GfxUtil.h"
#include "Util/Print.h"

// TODO this should go in another file
#define LOAD_FRAMES(spriteTexture, frames, animFrames)                                                                                               \
    {                                                                                                                                                \
        frames.clear();                                                                                                                              \
        for (auto& animName : animFrames) {                                                                                                          \
            auto frame = spriteTexture.getFrame(animName);                                                                                           \
            if (frame) {                                                                                                                             \
                frames.push_back(*frame);                                                                                                            \
            } else {                                                                                                                                 \
                print("Failed to load animation frame: ", animName);                                                                                 \
            }                                                                                                                                        \
        }                                                                                                                                            \
    }

namespace whal {

void loadAnimations(std::vector<Animation>& dstAnims);
inline void addAnimation(const char* name, std::vector<Frame> frames, std::vector<Animation>& dstAnims);

// TODO this could be simplified. Ideally this should be read from a file generated by aseprite?
// File would look something like this:
// "basename","count"
// "actor/player-run","4"
//
// this way, the only thing stored in code is animation names. Changing # of frames and file names is trivial
//
// TODO ideally, the loadAnimations code can also be abstracted so all I need to pass is a list of animation names

static std::array<const char*, 4> animFramesRun = {"actor/player-run1", "actor/player-run2", "actor/player-run3", "actor/player-run4"};

Expected<ecs::Entity> PlayerPrefab() {
    auto& ecs = ecs::ECS::getInstance();

    auto expected = ecs.entity();
    if (!expected.isExpected()) {
        return expected;
    }
    auto player = expected.value();
    player.add<Position>(Position::tiles(15, 10));
    player.add<Velocity>();
    player.add<PlayerControlRB>();
    // entity.add<PlayerControlFree>();

    // graphics
    s32 width = 16;
    s32 height = 16;
    auto playerDraw = Sprite();
    playerDraw.setFrameSize(width, height);
    // playerDraw.setColor(Color::EMERALD);
    player.add<Sprite>(playerDraw);

    std::vector<Animation> anims;
    loadAnimations(anims);
    player.add<Animator>(Animator(anims));

    auto halfLenX = PIXELS_PER_TEXEL * width / 4;
    auto halfLenY = PIXELS_PER_TEXEL * height / 2;
    player.add<RigidBody>(RigidBody(toFloatVec(player.get<Position>().e), halfLenX, halfLenY));

    return player;
}

DEFINE_PREFAB_FACTORY(PlayerPrefab);

inline void addAnimation(const char* name, std::vector<Frame> frames, std::vector<Animation>& dstAnims) {
    dstAnims.push_back(Animation("run", frames));
}

void loadAnimations(std::vector<Animation>& dstAnims) {
    auto& spriteTexture = GLResourceManager::getInstance().getTexture(TEXNAME_SPRITE);
    std::vector<Frame> frames;
    Animation anim;

    LOAD_FRAMES(spriteTexture, frames, animFramesRun);
    addAnimation("player-run", frames, dstAnims);
}

}  // namespace whal
